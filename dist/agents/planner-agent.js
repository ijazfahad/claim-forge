"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlannerAgent = void 0;
const base_agent_1 = require("./base-agent");
class PlannerAgent extends base_agent_1.BaseAgent {
    constructor() {
        super();
        this.agent = null;
    }
    async initialize() {
        const instructions = `
You are a Planner Agent for medical claim validation.

Your task is to generate a short, targeted checklist of validation questions for the claim using ONLY the payload provided.

PRIMARY GOALS:
1) Infer specialty and subspecialty from CPT/ICD/POS/summary.
2) Create 2–3 questions per tier:
   - type:"basic" → payer/claim mechanics (PA, eligibility, POS/modifiers, NCCI edits, frequency, plan rules).
   - type:"specialty" → rules typical for the inferred specialty.
   - type:"subspecialty" → fine-grained checks specific to the procedure/subspecialty.
3) Each question must be atomic, neutral (no presupposed "yes"), and ≤160 chars.

FOR EACH QUESTION INCLUDE:
- accept_if: 2–5 concrete evidence checks (what policy text would count as satisfying the question).
- search_queries: 1–2 SHORT verification hints (strings). These are NOT executed; they are for future human or automated verification.
  • If payload.domains exists, prefix with site:<domain>. Otherwise, use payer name as a keyword (no quotes).
  • Keep minimal and specific to THIS question; no generic catch-alls.
- risk_flags: object with booleans for { "PA", "POS", "NCCI", "Modifiers", "Frequency", "Diagnosis", "StateSpecific", "LOBSpecific", "Thresholds" } indicating which risk categories the question targets.

META:
Add:
- specialty, subspecialty, rationale (why you inferred them),
- derived: echo cpt_codes, icd10_codes, place_of_service, member_plan_type, state.

STRICT RULES:
- Use ONLY the provided payload; no external knowledge or URLs beyond forming terse verification hints.
- Do NOT answer the questions; planning only.
- Avoid duplicated question text. Keep search_queries distinct across questions when feasible.
- JSON ONLY. No prose/Markdown. No trailing commas. Start numbering at 1.

OUTPUT SHAPE:
{
  "questions": [
    {
      "n": 1,
      "type": "basic|specialty|subspecialty",
      "q": "string <=160 chars, atomic, neutral",
      "accept_if": ["string", "string"],
      "search_queries": ["site:domain.tld ..."],      // 0–2 items allowed
      "risk_flags": { "PA": false, "POS": false, "NCCI": false, "Modifiers": false, "Frequency": false, "Diagnosis": false, "StateSpecific": false, "LOBSpecific": false, "Thresholds": false }
    }
  ],
  "meta": {
    "specialty": "string",
    "subspecialty": "string",
    "rationale": "string",
    "derived": {
      "cpt_codes": ["string"],
      "icd10_codes": ["string"],
      "place_of_service": "string",
      "member_plan_type": "string",
      "state": "string"
    }
  }
}
`;
        const tools = [
            this.createCacheTool(),
            this.createGetCacheTool(),
        ];
        this.agent = this.createAgent('Planner Agent', instructions, tools);
    }
    async generateQuestions(payload, sanityResult) {
        if (!this.agent) {
            await this.initialize();
        }
        const cacheKey = `planner:${payload.cpt_codes.join(',')}:${payload.icd10_codes.join(',')}:${payload.payer}`;
        const cached = await this.redis.redis.get(cacheKey);
        if (cached) {
            return JSON.parse(cached);
        }
        const input = `
Generate validation questions for this medical claim:

Claim Payload:
- CPT Codes: ${payload.cpt_codes.join(', ')}
- ICD-10 Codes: ${payload.icd10_codes.join(', ')}
- Notes: ${payload.note_summary}
- Payer: ${payload.payer}
- Place of Service: ${payload.place_of_service || 'Not specified'}
- State: ${payload.state || 'Not specified'}
- Member Plan Type: ${payload.member_plan_type || 'Not specified'}

Sanity Check Results:
- Specialty: ${sanityResult.ssp_prediction.specialty}
- Subspecialty: ${sanityResult.ssp_prediction.subspecialty}
- Confidence: ${sanityResult.ssp_prediction.confidence}
- Issues: ${sanityResult.issues.join(', ')}
- Warnings: ${sanityResult.warnings.join(', ')}

Create 2-3 questions per tier (basic, specialty, subspecialty) with search queries for verification.
Follow the exact output format specified in the instructions.
`;
        try {
            const result = await this.executeAgent(this.agent, input);
            const plannerResult = {
                questions: result.questions || [],
                meta: result.meta || {
                    specialty: sanityResult.ssp_prediction.specialty,
                    subspecialty: sanityResult.ssp_prediction.subspecialty,
                    rationale: 'Generated by planner agent',
                    derived: {
                        cpt_codes: payload.cpt_codes,
                        icd10_codes: payload.icd10_codes,
                        place_of_service: payload.place_of_service || '',
                        member_plan_type: payload.member_plan_type || '',
                        state: payload.state || '',
                    }
                }
            };
            await this.redis.redis.setex(cacheKey, 1800, JSON.stringify(plannerResult));
            return plannerResult;
        }
        catch (error) {
            console.error('Planner Agent error:', error);
            throw new Error(`Planner failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
}
exports.PlannerAgent = PlannerAgent;
//# sourceMappingURL=planner-agent.js.map